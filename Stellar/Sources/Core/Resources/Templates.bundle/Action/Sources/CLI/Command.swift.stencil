//  {{ name }}ParsableCommand.swift

import ActionDSL
import ArgumentParser
import Foundation
import {{ name }}

public class {{ name }}ParsableCommand: ParsableCommand, CustomReflectable  {
    
    public typealias Action = {{ name }}
    
    private static var allConfigurationOptions = [ActionParamProtocol]()
    
    private var config: Action.Configuration!
    
    // MARK: - Public
    
    required public init() { }
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        var parsedAttributes = [String: String]()
        try Self.allConfigurationOptions.forEach { option in
            if let name = option.name {
                let value: String
                if option.isRequired == false {
                    value = try container.decodeIfPresent(String.self, forKey: .custom(name)) ?? option.defaultValue!
                } else {
                    value = try container.decode(String.self, forKey: .custom(name))
                }
                parsedAttributes[name] = value
            }
        }
        
        self.config = .init()
        let mirror = Mirror(reflecting: config!)
        for property in mirror.children {
            if let name = property.label?.trimmingCharacters(in: .init(charactersIn: "_")),
               let parsedValue = parsedAttributes[name] {
                (property.value as! ActionParam).wrappedValue = parsedValue
            }
        }
    }
    
    public var customMirror: Mirror {
        var list = [Mirror.Child]()
        for property in Self.allConfigurationOptions {
            let child: Mirror.Child
            let name = property.name!
            if property.isRequired {
                child = Mirror.Child(label: name, value: Option<String>(name: .shortAndLong))
            } else {
                child = Mirror.Child(label: name, value: Option<Optional<String>>(name: .shortAndLong))
            }
            list.append(child)
        }
        
        return Mirror(Self.init(), children: list)
    }
    
    public func run() throws {
        try Action().run(config: config)
    }
    
    static func processArguments() throws {
         Self.allConfigurationOptions = Action.actionOptions()
    }
}

extension {{ name }}ParsableCommand {
    
    enum CodingKeys: CodingKey {
        case custom(String)
        
        init?(stringValue: String) {
            self = .custom(stringValue)
        }
        
        var stringValue: String {
            switch self {
            case let .custom(name): return name
            }
        }
        
        var intValue: Int? { nil }
        init?(intValue _: Int) { nil }
    }
}
